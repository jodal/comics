[project]
name = "comics"
version = "4.2.0"
description = "Comics is a webcomics aggregator."
authors = [{ name = "Stein Magnus Jodal", email = "stein.magnus@jodal.no" }]
readme = "README.md"
license = { text = "AGPL-3.0-only" }
classifiers = ["Private :: Do Not Upload"]
requires-python = ">=3.12,<3.13"
dependencies = [
    "django==3.2.25",
    "pillow>=11.0.0",
    "cssmin==0.2.0",
    "cssselect==1.2.0",
    "defusedxml>=0.7.1",
    "django-allauth==0.51",
    "django-bootstrap-form==3.4",
    "django-compressor==3.1",
    "django-environ==0.9.0",
    "django-invitations==1.9.3",
    "django-tastypie==0.15.0",
    "feedparser>=6.0.11",
    "httpx>=0.28.1",
    "jsmin==3.0.1",
    "lxml>=5.3.0",
    "pytz>=2024.2",
    "sentry-sdk>=2.19.2",
    "setuptools>=75.6.0",         # Needed by django-bootstrap-form
]

[project.optional-dependencies]
api = ["biplist>=1.0.3,<2", "pyyaml>=6.0.1,<7"]
cache = ["pymemcache>=4.0.0,<5"]
pgsql = ["psycopg2-binary>=2.9.9,<3"]
server = ["gunicorn>=22.0,<23"]

[dependency-groups]
dev = [
    "django-debug-toolbar>=3.8.1,<4",
    "django-extensions>=3.2.3,<4",
    "tox-uv>=1.16.2",
    "tox>=4.21",
]
# TODO: Replace docs/requirements.txt once Read the Docs supports dependency groups:
# https://github.com/readthedocs/readthedocs.org/issues/11766
# docs = []
lint = ["ruff>=0.8.4"]
tests = [
    "pytest>=8.2.2,<9",
    "pytest-cov>=5.0.0,<6",
    "pytest-django>=4.8.0,<5",
    "pytest-mock>=3.14.0,<4",
]
typing = [
    "django-stubs>=1.16.0,<2",
    "mypy>=1.10.0,<2",
    "types-pytz>=2024.1.0.20240417,<2025",
    "types-toml>=0.10.8.20240310,<0.11",
]


[tool.django-stubs]
django_settings_module = "comics.settings"


[tool.pytest.ini_options]
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango40Warning:invitations",
    "ignore::django.utils.deprecation.RemovedInDjango40Warning:tastypie",
    "ignore::django.utils.deprecation.RemovedInDjango41Warning",
]
DJANGO_SETTINGS_MODULE = "comics.settings"


[tool.mypy]
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "comics.aggregator.crawler"
disallow_untyped_defs = true
warn_return_any = true

[[tool.mypy.overrides]]
module = "comics.core.comic_data"
disallow_untyped_defs = true
warn_return_any = true

[[tool.mypy.overrides]]
module = "comics.*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "debug_toolbar.*",
    "django_extensions.*",
    "environ.*",
    "feedparser.*",
    "invitations.*",
    "lxml.*",
    "PIL.*",
    "tastypie.*",
]
ignore_missing_imports = true


[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A003",    # builtin-attribute-shadowing
    "ANN",     # flake8-annotations
    "ARG001",  # unused-function-argument  # TODO
    "ARG002",  # unused-method-argument  # TODO
    "D",       # flake8-pydocstyle
    "DTZ",     # flake8-datetimez  # TODO
    "EM101",   # raw-string-in-exception
    "FBT",     # flake8-boolean-trap  # TODO
    "FIX001",  # line-contains-fixme
    "FIX002",  # line-contains-todo
    "FIX003",  # line-contains-xxx
    "N818",    # error-suffix-on-exception-name  # TODO
    "PERF401", # manual-list-comprehension  # TODO
    "PLR0913", # too-many-arguments  # TODO
    "PLR2004", # magic-value-comparison
    "PT",      # flake8-pytest-style  # TODO
    "PTH",     # flake8-use-pathlib  # TODO
    "RET",     # flake8-return  # TODO
    "RET504",  # unnecessary-assign
    "RUF012",  # mutable-class-default  # TODO
    "S101",    # assert
    "SIM115",  # open-file-with-context-handler  # TODO
    "SLF",     # flake8-self  # TODO
    "TD",      # flake8-todos
    "TRY",     # tryceratops  # TODO
    "TRY003",  # raise-vanilla-args
    "UP031",   # printf-string-formatting  # TODO
    #
    # These rules interfere with `ruff format`
    "COM812", # missing-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
]

[tool.ruff.lint.isort]
known-first-party = ["comics"]

[tool.tox]
requires = ["tox>=4.21"]
env_list = ["3.12", "docs", "ruff-format", "ruff-lint", "mypy"]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
dependency_groups = ["tests"]
set_env = { DJANGO_SECRET_KEY = "test-only-s3cret" }
commands = [
    [
        "uv",
        "run",
        "pytest",
        "--basetemp={envtmpdir}",
        "--cov=comics",
        "--cov-report=term-missing",
        "{posargs}",
    ],
]

[tool.tox.env.docs]
dependency_groups = []
changedir = "docs"
commands = [
    [
        "uv",
        "pip",
        "install",
        "-r",
        "requirements.txt",
    ],
    [
        "uv",
        "run",
        "sphinx-build",
        "--builder",
        "html",
        "--doctree-dir",
        "{envtmpdir}{/}doctrees",
        ".",
        "{envtmpdir}{/}html",
    ],
]

[tool.tox.env."ruff-format"]
runner = "uv-venv-lock-runner"
dependency_groups = ["lint"]
commands = [["uv", "run", "ruff", "format", "--check", "{posargs:.}"]]

[tool.tox.env."ruff-lint"]
runner = "uv-venv-lock-runner"
dependency_groups = ["lint"]
commands = [["uv", "run", "ruff", "check", "{posargs:.}"]]

[tool.tox.env.mypy]
runner = "uv-venv-lock-runner"
dependency_groups = ["typing"]
commands = [["uv", "run", "mypy", "{posargs:comics}"]]
