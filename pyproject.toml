[tool.poetry]
name = "comics"
version = "4.2.0"
description = ""
authors = ["Stein Magnus Jodal <stein.magnus@jodal.no>"]
license = "AGPL-3.0-only"

[tool.poetry.dependencies]
Django = "^3.2"
Pillow = "^10.3.0"
PyYAML = { version = "^6.0.1", optional = true }
biplist = { version = "^1.0.3", optional = true }
cssmin = "^0.2.0"
cssselect = "^1.2.0"
defusedxml = "^0.7.1"
django-allauth = "^0.51.0"
django-bootstrap-form = "^3.4"
django-compressor = "^3.1"
django-environ = "^0.9.0"
django-invitations = "^1.9.3"
django-tastypie = "^0.14.4"
feedparser = "^6.0.11"
gunicorn = { version = "^22.0.0", optional = true }
httpx = "^0.27.0"
jsmin = "^3.0.1"
lxml = "^5.2.2"
psycopg2-binary = { version = "^2.9.9", optional = true }
pymemcache = { version = "^4.0.0", optional = true }
python = "^3.12"
pytz = "^2024.1"
sentry-sdk = "^2.7.1"
setuptools = "^70.1.1"

[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "^3.8.1"
django-extensions = "^3.2.3"
django-stubs = "^1.16.0"
mypy = "^1.10.0"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-django = "^4.8.0"
pytest-mock = "^3.14.0"
ruff = "^0.4.10"
tox = "^4.15.1"
types-pytz = "^2024.1.0.20240417"
types-toml = "^0.10.8.20240310"

[tool.poetry.extras]
api = ["biplist", "PyYAML"]
cache = ["pymemcache"]
pgsql = ["psycopg2-binary"]
server = ["gunicorn"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango40Warning:invitations",
    "ignore::django.utils.deprecation.RemovedInDjango40Warning:tastypie",
    "ignore::django.utils.deprecation.RemovedInDjango41Warning",
]
DJANGO_SETTINGS_MODULE = "comics.settings"


[tool.django-stubs]
django_settings_module = "comics.settings"


[tool.mypy]
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "comics.aggregator.crawler"
disallow_untyped_defs = true
warn_return_any = true

[[tool.mypy.overrides]]
module = "comics.core.comic_data"
disallow_untyped_defs = true
warn_return_any = true

[[tool.mypy.overrides]]
module = "comics.*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "debug_toolbar.*",
    "django_extensions.*",
    "environ.*",
    "feedparser.*",
    "invitations.*",
    "lxml.*",
    "PIL.*",
    "tastypie.*",
]
ignore_missing_imports = true


[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    #"DTZ", # flake8-datetimez  # TODO
    "E",   # pycodestyle
    "ERA", # eradicate
    "F",   # pyflakes
    #"FBT", # flake8-boolean-trap  # TODO
    "I",   # isort
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLR", # pylint refactor
    "PLW", # pylint warning
    #"PT",  # flake8-pytest-style  # TODO
    #"PTH", # flake8-use-pathlib  # TODO
    "Q", # flake8-quotes
    #"RET", # flake8-return  # TODO
    "RSE", # flake8-raise
    "RUF", # ruff
    "SIM", # flake8-simplify
    #"SLF", # flake8-self  # TODO
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    #"TRY", # tryceratops  # TODO
    "UP", # pyupgrade
    "W",  # pycodestyle
]
ignore = [
    "A003",    # builtin-attribute-shadowing
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "ARG001",  # unused-function-argument  # TODO
    "ARG002",  # unused-method-argument  # TODO
    "ISC001",  # single-line-implicit-string-concatenation
    "PLR0913", # too-many-arguments  # TODO
    "PLR2004", # magic-value-comparison
    "N818",    # error-suffix-on-exception-name  # TODO
    "RET504",  # unnecessary-assign
    "RUF012",  # mutable-class-default  # TODO
    "TRY003",  # raise-vanilla-args
    "UP031",   # printf-string-formatting  # TODO
]

[tool.ruff.lint.isort]
known-first-party = ["comics"]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
